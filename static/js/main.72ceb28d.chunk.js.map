{"version":3,"sources":["layout/Navbar.js","layout/Layout.js","components/contacts/CreateNewContacts.js","components/contacts/ContactsTable.js","components/contacts/Dashboard.js","components/views/Contacts.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","Navbar","bg","Brand","className","to","Layout","Container","children","CreateNewContact","state","contactName","contactNumber","gender","handleChange","input","key","newState","setState","handleClick","contact","name","number","pushContact","Form","Group","controlId","Label","Control","value","this","onChange","event","target","type","placeholder","Text","e","as","custom","Button","onClick","variant","React","Component","ContactsTable","Row","Col","md","Table","striped","bordered","hover","contactList","map","i","Dashboard","countGenderContacts","count","length","Contacts","contacts","componentDidMount","contactsFromLocalStorage","localStorage","getItem","JSON","parse","obj","push","setItem","stringify","console","log","match","path","exact","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.72ceb28d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Nav = (props) => {\r\n    return (\r\n        <Navbar bg=\"dark\">\r\n            <Navbar.Brand className=\"text-light\">Banjex Phonebook</Navbar.Brand>\r\n            <Link className=\"mr-3\" to='/'>Home</Link>\r\n            <Link className=\"mr-3\" to='/table'>Contacts</Link>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport Navbar from \"./Navbar\"\r\n\r\nconst Layout = (props) => {\r\n    return (\r\n        <div>\r\n            <Navbar></Navbar>\r\n            <Container>\r\n                {props.children}\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\n\r\nexport default class CreateNewContact extends React.Component {\r\n\r\n    state = {\r\n        contactName: '',\r\n        contactNumber: 0,\r\n        gender: ''\r\n    }\r\n\r\n    handleChange = (input, key) => {\r\n        let newState = {}\r\n        newState[key] = input\r\n\r\n        this.setState(newState)\r\n    }\r\n\r\n    handleClick = () => {\r\n        const contact = {\r\n            name: this.state.contactName,\r\n            number: this.state.contactNumber,\r\n            gender: this.state.gender\r\n        }\r\n        this.props.pushContact(contact);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label >Name</Form.Label>\r\n                        <Form.Control value={this.state.contactName} onChange={(event) => this.handleChange(event.target.value, 'contactName')} type=\"emaiContact Namel\" placeholder=\"Enter name\" />\r\n                        <Form.Text className=\"text-muted\">\r\n                            Insert new contact name.\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicPassword\">\r\n                        <Form.Label >Phone</Form.Label>\r\n                        <Form.Control onChange={(event) => this.handleChange(event.target.value, 'contactNumber')} type=\"number\" placeholder=\"Telephone\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"exampleForm.SelectCustom\">\r\n                        <Form.Label>Custom select</Form.Label>\r\n                        <Form.Control value={this.state.gender} onChange={e => this.handleChange(e.target.value, 'gender')} as=\"select\" custom>\r\n                            <option value={null}>choose gender</option>\r\n                            <option value='male'>Male</option>\r\n                            <option value='female'>Female</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Button onClick={this.handleClick} variant=\"primary\" type=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Row, Col, Table } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ContactsTable = (props) => {\r\n    return (\r\n        <div>\r\n            <Row className='mb-5'>\r\n                <Col md={12}>\r\n                    <Link to='/create'><button className='btn btn-info w-100'>New</button></Link>\r\n                </Col>\r\n            </Row>\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>Name</th>\r\n                        <th>number</th>\r\n                        <th>gendere</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        props.contactList.map((contact, i) => {\r\n                            return (\r\n                                <tr key={i}>\r\n                                    <td>{i+1}</td>\r\n                                    <td>{contact.name}</td>\r\n                                    <td>{contact.number}</td>\r\n                                    <td>{contact.gender}</td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactsTable;","import React from 'react'\r\nimport { Table } from 'react-bootstrap'\r\n\r\n\r\n\r\nexport default class Dashboard extends React.Component {\r\n\r\n\r\n\r\n\r\n    countGenderContacts = (gender) => {\r\n        let count = 0;\r\n        for (let contact of this.props.contactList) {\r\n            if (contact.gender === gender) {\r\n                count += 1\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>count contacts</th>\r\n                        <th>male</th>\r\n                        <th>female</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>{this.props.contactList.length}</td>\r\n                        <td>{this.countGenderContacts('male')}</td>\r\n                        <td>{this.countGenderContacts('female')}</td>\r\n                    </tr>\r\n\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport CreateNewContact from '../contacts/CreateNewContacts';\r\nimport ContactsTable from '../contacts/ContactsTable';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport Dashboard from '../contacts/Dashboard'\r\n\r\nconst ContactsStorageKey = 'banjexcontacts';\r\n\r\nexport default class Contacts extends React.Component {\r\n\r\n    state = {\r\n        contacts: []\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        const contactsFromLocalStorage = localStorage.getItem(ContactsStorageKey);\r\n\r\n        if (contactsFromLocalStorage) {\r\n            this.setState({ contacts: JSON.parse(contactsFromLocalStorage) })\r\n        }\r\n    }\r\n\r\n    pushContact = (obj) => {\r\n        if (obj) {\r\n            let contacts = [...this.state.contacts]\r\n            contacts.push(obj)\r\n\r\n            this.setState({ contacts: contacts }, () => {\r\n                localStorage.setItem(ContactsStorageKey, JSON.stringify(this.state.contacts));\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.props.match)\r\n        return (\r\n            <div>\r\n                <Row className='justify-content-between mt-5'>\r\n                    <Col>\r\n                        <h1>Contacts</h1>\r\n                    </Col>\r\n                </Row>\r\n                <hr></hr>\r\n\r\n                <Route path={`${this.props.match.path}`} exact={true} component={() => <Dashboard contactList={this.state.contacts}></Dashboard>} />\r\n                <Route path={`${this.props.match.path}table`} exact={true} component={() => <ContactsTable contactList={this.state.contacts}></ContactsTable>} />\r\n                <Route path={`${this.props.match.path}create`} exact={true} component={() => <CreateNewContact pushContact={this.pushContact}></CreateNewContact>} />\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Layout from './layout/Layout';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nimport Contacts from './components/views/Contacts';\r\n\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Layout>\r\n        <Switch>\r\n\r\n          <Route path=\"/\" component={Contacts}></Route>\r\n\r\n        </Switch>\r\n      </Layout>\r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}